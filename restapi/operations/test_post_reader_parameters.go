// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewTestPostReaderParams creates a new TestPostReaderParams object
//
// There are no default values defined in the spec.
func NewTestPostReaderParams() TestPostReaderParams {

	return TestPostReaderParams{}
}

// TestPostReaderParams contains all the bound params for the test post reader operation
// typically these are obtained from a http.Request
//
// swagger:parameters testPostReader
type TestPostReaderParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: query
	*/
	ADate *strfmt.DateTime
	/*
	  In: body
	*/
	Payload io.ReadCloser
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewTestPostReaderParams() beforehand.
func (o *TestPostReaderParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qADate, qhkADate, _ := qs.GetOK("aDate")
	if err := o.bindADate(qADate, qhkADate, route.Formats); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		o.Payload = r.Body
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindADate binds and validates parameter ADate from query.
func (o *TestPostReaderParams) bindADate(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: datetime
	value, err := formats.Parse("datetime", raw)
	if err != nil {
		return errors.InvalidType("aDate", "query", "strfmt.DateTime", raw)
	}
	o.ADate = (value.(*strfmt.DateTime))

	if err := o.validateADate(formats); err != nil {
		return err
	}

	return nil
}

// validateADate carries on validations for parameter ADate
func (o *TestPostReaderParams) validateADate(formats strfmt.Registry) error {

	if err := validate.FormatOf("aDate", "query", "datetime", o.ADate.String(), formats); err != nil {
		return err
	}
	return nil
}
